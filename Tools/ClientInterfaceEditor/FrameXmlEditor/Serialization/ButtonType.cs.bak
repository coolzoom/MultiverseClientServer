using System;
using System.ComponentModel;
using Microsoft.Multiverse.FrameXml.Controls;
using System.Xml.Serialization;
using System.Collections.Generic;
using System.Drawing.Design;

namespace Microsoft.Multiverse.FrameXml.Serialization
{
	/// Generated from Ui.xsd into two pieces and merged here.
	/// Manually modified later - DO NOT REGENERATE

	/// <remarks/>
	[System.Xml.Serialization.XmlIncludeAttribute(typeof(UnitButtonType))]
	[System.Xml.Serialization.XmlIncludeAttribute(typeof(CheckButtonType))]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "3.5.20706.1")]
	[System.SerializableAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.multiverse.net/ui")]
	[System.Xml.Serialization.XmlRootAttribute("Button", Namespace = "http://www.multiverse.net/ui", IsNullable = false)]
	public partial class ButtonType : FrameType
	{
		/// <remarks/>
		[XmlAttribute]
		[Category("Appearance")]
		// [Browsable(false)]
		public string text
		{
			get
			{
				return Properties.GetValue<string>("text");
			}
			set
			{
				this.Properties["text"] = value;
			}
		}

		/// <summary>
		/// Items of type Dimension with different element names.
		/// </summary>
		[XmlElement("PushedTextOffset", typeof(Dimension.PushedTextOffset))]
		[Browsable(false)]
		public Dimension.PushedTextOffset[] PushedTextOffsets
		{
			get { return this.Properties.GetArray<Dimension.PushedTextOffset>("PushedTextOffset"); }
			set { this.Properties.SetArray<Dimension.PushedTextOffset>("PushedTextOffset", value); }
		}



        //[XmlElement("DisabledColor", typeof(ColorType))]
        //[Browsable(false)]
        //public ColorType[] DisabledColors
        //{
        //    get { return this.DisabledColor.AsColorTypeArray(); }
        //    set { this.DisabledColor = value.AsColor(); }
        //}

        //[XmlElement("HighlightColor", typeof(ColorType))]
        //[Browsable(false)]
        //public ColorType[] HighlightColors
        //{
        //    get { return this.HighlightColor.AsColorTypeArray(); }
        //    set { this.HighlightColor = value.AsColor(); }
        //}

        //[XmlElement("NormalColor", typeof(ColorType))]
        //[Browsable(false)]
        //public ColorType[] NormalColors
        //{
        //    get { return this.NormalColor.AsColorTypeArray(); }
        //    set { this.NormalColor = value.AsColor(); }
        //}


        /// <summary>
        /// Items of type TextureType with different element names.
        /// </summary>
        [XmlElement("DisabledTexture", typeof(TextureType))]
        [XmlElement("HighlightTexture", typeof(TextureType))]
        [XmlElement("NormalTexture", typeof(TextureType))]
        [XmlElement("PushedTexture", typeof(TextureType))]
        //[XmlElement("ThumbTexture", typeof(TextureType))]
        [XmlChoiceIdentifier(MemberName = "TextureNames")]
        [Browsable(false)]
        public TextureType[] TextureItems
        {
            get { return this.textureItems.ValuesArray; }
            set { this.textureItems.ValuesArray = value; }
        }

        /// <summary>
        /// Element names for items of type TextureType.
        /// </summary>
        [XmlElement("TextureNames")]
        [XmlIgnore]
        [Browsable(false)]
        public TextureChoice[] TextureNames
        {
            get { return this.textureItems.KeysArray; }
            set { this.textureItems.KeysArray = value; }
        }
	}
}
/********************************************************************

The Multiverse Platform is made available under the MIT License.

Copyright (c) 2012 The Multiverse Foundation

Permission is hereby granted, free of charge, to any person 
obtaining a copy of this software and associated documentation 
files (the "Software"), to deal in the Software without restriction, 
including without limitation the rights to use, copy, modify, 
merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software 
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be 
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE 
OR OTHER DEALINGS IN THE SOFTWARE.

*********************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Build.Framework;
using System.IO;

namespace Microsoft.MultiverseInterfaceStudioShell.BuildUtilities
{
	public sealed class TocGenerator : Microsoft.Build.Utilities.Task
	{
        private const string generatorComment = "Basic project properties and project files will be automatically added during deployment. Properties added by the user will be copied without changes.";

		public string InterfaceVersion { get; set; }
		public string AddonTitle { get; set; }
		public string AddonNotes { get; set; }
		public string Dependencies { get; set; }
		public string SavedVariables { get; set; }
		public string SavedVariablesPerCharacter { get; set; }
		public string Author { get; set; }
		public string AddonVersion { get; set; }
		public string AuthorEmail { get; set; }

		[Required]
		public ITaskItem InputPath { get; set; }
		[Required]
		public ITaskItem OutputPath { get; set; }

		public ITaskItem[] Files { get; set; }

		public override bool Execute()
		{
            TocFile tf = new TocFile();

            // The file might not exist, if the project has no TOC files and a TOC entry was dynamically generated
            if (File.Exists(this.InputPath.ItemSpec))
            {
                using (TextReader r = new StreamReader(this.InputPath.ItemSpec, Encoding.UTF8, true))
                {
                    tf.Read(r);
                }
            }

			using (TextWriter w = new StreamWriter(this.OutputPath.ItemSpec, false, Encoding.UTF8))
			{
                if (!IsFieldSet(tf, "X-AutoGenerated"))
                    SetField(tf, "X-AutoGenerated", "true");
                if (!IsFieldSet(tf, "X-GeneratorComment"))
                    SetField(tf, "X-GeneratorComment", generatorComment);
                
				SetField(tf, "Interface", this.InterfaceVersion);
				SetField(tf, "Title", this.AddonTitle);
				SetField(tf, "Notes", this.AddonNotes);
				SetField(tf, "Dependencies", this.Dependencies);
				SetField(tf, "SavedVariables", this.SavedVariables);
				SetField(tf, "SavedVariablesPerCharacter", this.SavedVariablesPerCharacter);
				SetField(tf, "Author", this.Author);
				SetField(tf, "Version", this.AddonVersion);
				SetField(tf, "X-eMail", this.AuthorEmail);

				tf.Files.Clear();

				if (this.Files != null)
				{
					foreach (ITaskItem item in this.Files)
					{
						tf.Files.Add(item.ItemSpec);
					}
				}

				tf.Write(w);
			}

			return true;
		}

		private static void SetField(TocFile file, string name, string value)
		{
			if (!String.IsNullOrEmpty(value))
				file[name] = value;
		}

        private static bool IsFieldSet(TocFile file, string name)
        {
            return file[name] != null;
        }
	}
}

///////////////////////////////////////////////////////////////////////  
//	SpeedTree Effects
//
//	(c) 2003 IDV, Inc.
//
//	*** INTERACTIVE DATA VISUALIZATION (IDV) PROPRIETARY INFORMATION ***
//
//	This software is supplied under the terms of a license agreement or
//	nondisclosure agreement with Interactive Data Visualization and may
//	not be copied or disclosed except in accordance with the terms of
//	that agreement.
//
//      Copyright (c) 2001-2003 IDV, Inc.
//      All Rights Reserved.
//
//		IDV, Inc.
//		1233 Washington St. Suite 610
//		Columbia, SC 29201
//		Voice: (803) 799-1699
//		Fax:   (803) 931-0320
//		Web:   http://www.idvinc.com


///////////////////////////////////////////////////////////////////////  
// Shader Variables

// world * view * projection matrix
//float4x4	g_mWorldViewProjection;		

// textures
//sampler2D		g_texCompositeLeafMap;
//sampler2D		g_texBark;

// lighting
//float4		g_vLightPosition;
//float4		g_vLightDiffuse;
//float4		g_vLightAmbient;
//float		g_fGlobalSaturation;
//float		g_fGlobalAmbient;





// leaf table
//float4		g_avLeafClusters[48];

// speedwind
//float4x4	g_amWindMatrices[4];
//float4x4	g_amLeafAngleMatrices[4];

// other
//float4      g_vTreePosition;
//float4		g_vMaterialDiffuse;
//float4		g_vMaterialAmbient;
//float4		g_vCameraDir;

//float4     g_fogSettings;
//float4     g_fogColour;

///////////////////////////////////////////////////////////////////////  
// Shader Output Structures

struct BranchVSOutput
{
    float4	vPosition				: POSITION;
    float4	vColor					: COLOR0;
    float2	vBaseTexCoords			: TEXCOORD0;
    float2	vSelfShadowTexCoords	: TEXCOORD1;
    float   fFog					: FOG;
};

struct ShadowCasterVSOutput
{
	float4	vPosition		: POSITION;
	float4	vColor			: COLOR0;
	float	fFog			: FOG;
	float	depth			: TEXCOORD0;
};

struct ShadowCasterTexVSOutput
{
	float4	vPosition		: POSITION;
	float4	vColor			: COLOR0;
	float	depthOffset		: COLOR1;
	float2	vBaseTexCoords	: TEXCOORD1;
	float	fFog			: FOG;
};

struct FrondVSOutput
{
    float4	vPosition				: POSITION;
    float4	vColor					: COLOR0;
    float2	vBaseTexCoords			: TEXCOORD0;
    float2	vSelfShadowTexCoords	: TEXCOORD1;
    float   fFog					: FOG;
};

struct LeafVSOutput
{
    float4	vPosition		: POSITION;
    float4	vColor			: COLOR0;
    float2	vBaseTexCoords	: TEXCOORD0;
    float   fFog			: FOG;
};

struct BillboardVSOutput
{
    float4	vPosition				: POSITION;
    float2	vBaseTexCoords			: TEXCOORD0;
    float   fFog					: FOG;
};

///////////////////////////////////////////////////////////////////////  
// Branch Vertex Shader

BranchVSOutput BranchVS(float4 vPosition			: POSITION, 
						float3 vNormal				: NORMAL,
						float4 vBaseTexCoords		: TEXCOORD0,
						float2 vWindAttribs			: TEXCOORD1,
						float3 vBinormal			: TEXCOORD2,
						float3 vTangent				: TEXCOORD3,
						uniform float4x4	g_mWorldViewProjection,
						uniform float4		g_vLightPosition,
						uniform float4		g_vLightDiffuse,
						uniform float4		g_vLightAmbient,
						uniform float4x4	g_amWindMatrices[4],
						uniform float4      g_vTreePosition,
						uniform float4		g_vMaterialDiffuse,
						uniform float4		g_vMaterialAmbient,
						uniform float4     g_fogSettings
						)
{
	BranchVSOutput Output;
	
	float4 vWindTmp = mul(vPosition, g_amWindMatrices[vWindAttribs.x]);
	float4 vWindyPoint = lerp(vPosition,										// interpolate between original position
							vWindTmp,	//	and full wind-blown position
							vWindAttribs.y);									//	using the wind weight
	vWindyPoint.rgb += g_vTreePosition.rgb;										// move to tree position
	Output.vPosition = mul(g_mWorldViewProjection, vWindyPoint);				// project to screen
	
	Output.vBaseTexCoords = vBaseTexCoords.xy;									// pass texcoords through
	Output.vSelfShadowTexCoords = vBaseTexCoords.zw;							// pass texcoords through

	Output.vColor.r = 0.5f + 0.5f * dot(g_vLightPosition.xyz, vTangent);		// compute tangent bumpmap effect
	Output.vColor.g = 0.5f + 0.5f * dot(g_vLightPosition.xyz, vBinormal);		// compute binormal bumpmap effect
	Output.vColor.b = 0.5f + 0.5f * dot(g_vLightPosition.xyz, vNormal);			// compute normal bumpmap effect
	Output.vColor.a = 1.0f;		
	
    Output.fFog = (g_fogSettings[1] - Output.vPosition.z) / 
					(g_fogSettings[1] - g_fogSettings[0]) * g_fogSettings[2];	// compute linear fog

	return Output;
}

ShadowCasterVSOutput BranchShadowCasterVS(float4 vPosition			: POSITION, 
						float3 vNormal				: NORMAL,
						float4 vBaseTexCoords		: TEXCOORD0,
						float2 vWindAttribs			: TEXCOORD1,
						float3 vBinormal			: TEXCOORD2,
						float3 vTangent				: TEXCOORD3,
						uniform float4x4	g_mWorldViewProjection,
						uniform float4		g_vLightAmbient,
						uniform float4x4	g_amWindMatrices[4],
						uniform float4      g_vTreePosition,
						uniform float4     g_fogSettings
						)
{
	ShadowCasterVSOutput Output;
	
	float4 vWindTmp = mul(vPosition, g_amWindMatrices[vWindAttribs.x]);
	float4 vWindyPoint = lerp(vPosition,										// interpolate between original position
							vWindTmp,	//	and full wind-blown position
							vWindAttribs.y);									//	using the wind weight
	vWindyPoint.rgb += g_vTreePosition.rgb;										// move to tree position
	Output.vPosition = mul(g_mWorldViewProjection, vWindyPoint);				// project to screen
	Output.depth = Output.vPosition.z;
	
	Output.vColor = g_vLightAmbient;
	
    Output.fFog = (g_fogSettings[1] - Output.vPosition.z) / 
					(g_fogSettings[1] - g_fogSettings[0]) * g_fogSettings[2];	// compute linear fog

	return Output;
}

///////////////////////////////////////////////////////////////////////  
// Frond Vertex Shader

FrondVSOutput FrondVS(float4 vPosition				: POSITION, 
						float3 vNormal				: NORMAL,
						float4 vBaseTexCoords		: TEXCOORD0,
						float2 vWindAttribs			: TEXCOORD1,
						uniform float4x4	g_mWorldViewProjection,
						uniform float4		g_vLightPosition,
						uniform float4		g_vLightDiffuse,
						uniform float4		g_vLightAmbient,
						uniform float4x4	g_amWindMatrices[4],
						uniform float4      g_vTreePosition,
						uniform float4		g_vMaterialDiffuse,
						uniform float4		g_vMaterialAmbient,
						uniform float4     g_fogSettings,
						uniform float4		g_vCameraDir
						)
{
	FrondVSOutput Output;
	
	float4 vWindyPoint = lerp(vPosition,										// interpolate between original position
							mul(vPosition, g_amWindMatrices[vWindAttribs.x]),	//	and full wind-blown position
							vWindAttribs.y);									//	using the wind weight
	vWindyPoint.rgb += g_vTreePosition.rgb;										// move to tree position
	Output.vPosition = mul(g_mWorldViewProjection, vWindyPoint);				// project to screen
	
	Output.vBaseTexCoords = vBaseTexCoords.xy;									// pass texcoords through
	Output.vSelfShadowTexCoords = vBaseTexCoords.zw;							// pass texcoords through
	
	float3 vMovedNormal = (vNormal - g_vCameraDir) * 0.5f;						// average normal with inverse camera direction to 
																				//	smooth the lighting on the fronds for the side of 
																				//	the tree at which you are looking (not necessary, but
																				//	a nice effect)
	Output.vColor = max(dot(vMovedNormal, g_vLightPosition),0) *						// diffuse lighting
					g_vLightDiffuse * g_vMaterialDiffuse +						// diffuse color
					g_vLightAmbient * g_vMaterialAmbient;						// ambient color
	Output.vColor.a = 1.0f;														// we only want the texture alpha
	
	Output.fFog = (g_fogSettings[1] - Output.vPosition.z) / 
					(g_fogSettings[1] - g_fogSettings[0]) * g_fogSettings[2];	// compute linear fog
    
	return Output;
}

ShadowCasterTexVSOutput FrondShadowCasterVS(float4 vPosition				: POSITION, 
						float3 vNormal				: NORMAL,
						float4 vBaseTexCoords		: TEXCOORD0,
						float2 vWindAttribs			: TEXCOORD1,
						uniform float4x4	g_mWorldViewProjection,
						uniform float4		g_vLightAmbient,
						uniform float4x4	g_amWindMatrices[4],
						uniform float4      g_vTreePosition,
						uniform float4     g_fogSettings,
						uniform float4		ShadowTechnique,
						uniform float		DepthOffset
						)
{
	ShadowCasterTexVSOutput Output;
	
	float4 vWindyPoint = lerp(vPosition,										// interpolate between original position
							mul(vPosition, g_amWindMatrices[vWindAttribs.x]),	//	and full wind-blown position
							vWindAttribs.y);									//	using the wind weight
	vWindyPoint.rgb += g_vTreePosition.rgb;										// move to tree position
	Output.vPosition = mul(g_mWorldViewProjection, vWindyPoint);				// project to screen

	
	Output.vBaseTexCoords = vBaseTexCoords.xy;									// pass texcoords through
	
	// select between ambient light or depth as output depending on whether we are
	// using simple or depth shadows
	Output.vColor = lerp(g_vLightAmbient, Output.vPosition.z, ShadowTechnique.y);
   
    // select between 0 and DepthOffset for the depth offset passed to the pixel shader,
    // depending on whether we are using simple or depth shadows. 
	Output.depthOffset = lerp(0, DepthOffset, ShadowTechnique.y);
	
    Output.fFog = 1;
    
	return Output;
}

///////////////////////////////////////////////////////////////////////  
// Leaf Vertex Shader

LeafVSOutput LeafVS(float4 vPosition				: POSITION, 
						float3 vNormal				: NORMAL,
						float2 vBaseTexCoords		: TEXCOORD0,
						float2 vWindAttribs			: TEXCOORD1,
						float3 vLeafAttribs			: TEXCOORD2,
						uniform float4x4	g_mWorldViewProjection,
						uniform float4		g_vLightPosition,
						uniform float4		g_vLightDiffuse,
						uniform float4		g_vLightAmbient,
						uniform float4x4	g_amWindMatrices[4],
						uniform float4      g_vTreePosition,
						uniform float4		g_vMaterialDiffuse,
						uniform float4		g_vMaterialAmbient,
						uniform float4     g_fogSettings,
						uniform float4		g_vCameraDir,
						uniform float4		g_avLeafClusters[48],
						uniform float4x4	g_amLeafAngleMatrices[4]
						)
{
	LeafVSOutput Output;
	
	float4 vWindyPoint = lerp(vPosition,										// interpolate between original position
							mul(vPosition, g_amWindMatrices[vWindAttribs.x]),	//	and full wind-blown position
							vWindAttribs.y);									//	using the wind weight
	vWindyPoint.rgb += g_vTreePosition.rgb;										// move to tree position
	vWindyPoint.xyz += mul(g_avLeafClusters[vLeafAttribs.x] * vLeafAttribs.y, 
						g_amLeafAngleMatrices[vLeafAttribs.z]);					// leaf placement using SpeedWind leaf rocking
	Output.vPosition = mul(g_mWorldViewProjection, vWindyPoint);				// project to screen
	
	Output.vBaseTexCoords = vBaseTexCoords;										// pass texcoords through
	
	float3 vMovedNormal = (vNormal - g_vCameraDir) * 0.5f;						// average normal with inverse camera direction to 
																				//	smooth the lighting on the leaves for the side of 
																				//	the tree at which you are looking (not necessary, but
																				//	a nice effect)
	
																
	Output.vColor = dot(vMovedNormal, g_vLightPosition) *						// diffuse lighting
					g_vLightDiffuse * g_vMaterialDiffuse +						// diffuse color
					g_vLightAmbient * g_vMaterialAmbient;						// ambient color
	Output.vColor.a = 1.0f;														// we only want the texture alpha

  	
    Output.fFog = (g_fogSettings[1] - Output.vPosition.z) / 
					(g_fogSettings[1] - g_fogSettings[0]) * g_fogSettings[2];	// compute linear fog

	return Output;
}


ShadowCasterTexVSOutput LeafShadowCasterVS(float4 vPosition				: POSITION, 
						float3 vNormal				: NORMAL,
						float2 vBaseTexCoords		: TEXCOORD0,
						float2 vWindAttribs			: TEXCOORD1,
						float3 vLeafAttribs			: TEXCOORD2,
						uniform float4x4	g_mWorldViewProjection,
						uniform float4		g_vLightAmbient,
						uniform float4x4	g_amWindMatrices[4],
						uniform float4      g_vTreePosition,
						uniform float4     g_fogSettings,
						uniform float4		g_avLeafClusters[48],
						uniform float4x4	g_amLeafAngleMatrices[4],
						uniform float4		ShadowTechnique,
						uniform float		DepthOffset
						)
{
	ShadowCasterTexVSOutput Output;
	
	float4 vWindyPoint = lerp(vPosition,										// interpolate between original position
							mul(vPosition, g_amWindMatrices[vWindAttribs.x]),	//	and full wind-blown position
							vWindAttribs.y);									//	using the wind weight
	vWindyPoint.rgb += g_vTreePosition.rgb;										// move to tree position
	vWindyPoint.xyz += mul(g_avLeafClusters[vLeafAttribs.x] * vLeafAttribs.y, 
						g_amLeafAngleMatrices[vLeafAttribs.z]);					// leaf placement using SpeedWind leaf rocking
	Output.vPosition = mul(g_mWorldViewProjection, vWindyPoint);				// project to screen
	
	Output.vBaseTexCoords = vBaseTexCoords.xy;									// pass texcoords through
	
	// select between ambient light or depth as output depending on whether we are
	// using simple or depth shadows
	Output.vColor = lerp(g_vLightAmbient, Output.vPosition.z, ShadowTechnique.y);
   
    // select between 0 and DepthOffset for the depth offset passed to the pixel shader,
    // depending on whether we are using simple or depth shadows. 
	Output.depthOffset = lerp(0, DepthOffset, ShadowTechnique.y);
	
    Output.fFog = 1;
	
	return Output;
}

///////////////////////////////////////////////////////////////////////  
// Billboard Vertex Shader

BillboardVSOutput BillboardVS(float4 vPosition			: POSITION, 
						float2 vBaseTexCoords		: TEXCOORD0,
						uniform float4x4	g_mWorldViewProjection,
						uniform float4     g_fogSettings
						)
{
	BillboardVSOutput Output;
	
	Output.vPosition = mul(g_mWorldViewProjection, vPosition);				// project to screen
	
	Output.vBaseTexCoords = vBaseTexCoords;										// pass texcoords through
	
	Output.fFog = (g_fogSettings[1] - Output.vPosition.z) / 
					(g_fogSettings[1] - g_fogSettings[0]) * g_fogSettings[2];	// compute linear fog

	return Output;
}


///////////////////////////////////////////////////////////////////////  
// Branch Pixel Shader

float4 BranchPS(BranchVSOutput In,
	uniform sampler2D	BarkSampler,
	uniform sampler2D	CompositeShadowSampler,
	uniform sampler2D	BarkNormalMapSampler,
	uniform float4		g_vMaterialDiffuse,
	uniform float4		g_vMaterialAmbient,
	uniform	float		g_fGlobalSaturation,
	uniform	float		g_fGlobalAmbient
	): COLOR
{
	float4 texBranch = tex2D(BarkSampler, In.vBaseTexCoords);
	float4 texShadow = tex2D(CompositeShadowSampler, In.vSelfShadowTexCoords);
	float4 texNormal = tex2D(BarkNormalMapSampler, In.vBaseTexCoords);
	
	// compute bump mapping lighting
	float3 vHalves = { 0.5f, 0.5f, 0.5f };
	float fDot3Lighting = dot(texNormal - vHalves, In.vColor - vHalves) * 4.0f;
	
	float4 vOutputColor = texBranch * texShadow * g_vMaterialDiffuse;		// compute the unlit color
    vOutputColor.rgb *= fDot3Lighting * g_fGlobalSaturation;				// dot3 lighting & saturation
	vOutputColor.rgb += texBranch.rgb * g_vMaterialAmbient * g_fGlobalAmbient;	// ambient (add the texture back in so it doesn't get washed out)
	
    return vOutputColor;
}


///////////////////////////////////////////////////////////////////////  
// Frond Pixel Shader

float4 FrondPS(FrondVSOutput In,
	uniform sampler2D	CompositeLeafSampler,
	uniform sampler2D	CompositeShadowSampler,	
	uniform	float		g_fGlobalSaturation,
	uniform	float		g_fGlobalAmbient	
	) : COLOR
{
    float4 texFrond = tex2D(CompositeLeafSampler, In.vBaseTexCoords);
    float4 texShadow = tex2D(CompositeShadowSampler, In.vSelfShadowTexCoords);
    
    float4 vOutputColor = texFrond * texShadow * In.vColor;					// compute the color due to lighting
    //float4 vOutputColor = texFrond * In.vColor;					// compute the color due to lighting
    //vOutputColor.rgb *= g_fGlobalSaturation;					// saturation
    //vOutputColor.rgb += vOutputColor.rgb * 0.6;
	//vOutputColor.rgb += texFrond * g_fGlobalAmbient;			// ambient (add the texture back in so it doesn't get washed out)
	//vOutputColor.rgb += texFrond * 0.5;
	return vOutputColor;
}

float4 FrondShadowCasterPS(ShadowCasterTexVSOutput In,
	uniform sampler2D	CompositeLeafSampler :TEXUNIT0
	) : COLOR
{
    float4 texFrond = tex2D(CompositeLeafSampler, In.vBaseTexCoords);

    clip(texFrond.a - 0.3);
        
    // Write the depth value to the depth map
    float4 vOutputColor = In.vColor;

    // Use some bias to avoid precision issue
    vOutputColor += In.depthOffset;

	return vOutputColor;
}


float4 LeafShadowCasterPS(ShadowCasterTexVSOutput In,
	uniform sampler2D		g_texCompositeLeafMap :TEXUNIT0
	) : COLOR
{
    float4 texLeaf = tex2D(g_texCompositeLeafMap, In.vBaseTexCoords);
    clip(texLeaf.a - 0.3);

    // Write the depth value to the depth map
    float4 vOutputColor = In.vColor;

    // Use some bias to avoid precision issue
    vOutputColor += In.depthOffset;

	return vOutputColor;
}

///////////////////////////////////////////////////////////////////////  
// Leaf Pixel Shader

float4 LeafPS(LeafVSOutput In,
	uniform sampler2D		g_texCompositeLeafMap
	) : COLOR
{
    float4 texLeaf = tex2D(g_texCompositeLeafMap, In.vBaseTexCoords);
    
    float4 vOutputColor = texLeaf * In.vColor;					// compute the color due to lighting
    // vOutputColor.rgb *= g_fGlobalSaturation;					// saturation
//    vOutputColor.rgb = vOutputColor.rgb * 0.8 * 2;
	//vOutputColor.rgb += texLeaf * g_fGlobalAmbient;				// ambient (add the texture back in so it doesn't get washed out)										
    vOutputColor.rgb += texLeaf * 0.25;
	return vOutputColor;
}

///////////////////////////////////////////////////////////////////////  
// Billboard Pixel Shader
float4 BillboardPS(float2 vBaseTexCoords: TEXCOORD0,
	uniform sampler2D		g_texCompositeLeafMap
	): COLOR
{
	float4 texBillboard = tex2D(g_texCompositeLeafMap, vBaseTexCoords);
	float4 outputColor = texBillboard + texBillboard * 0.25;
    return outputColor;
}

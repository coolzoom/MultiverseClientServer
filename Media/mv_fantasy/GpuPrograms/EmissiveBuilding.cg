
// arguments to the vertex shader
// in this version, we pass in the tangent, and compute the bitangent
struct a2v {
    float4 position : POSITION;
    float3 normal    : NORMAL;
    float2 texCoord : TEXCOORD0;
    float3 tangent    : TANGENT;
    float4 color    : COLOR;
};

// arguments to the vertex shader
// in this version, we pass in the tangent, and compute the bitangent
// we don't have color data in this one
struct a2v_nocolor {
    float4 position : POSITION;
    float3 normal    : NORMAL;
    float2 texCoord : TEXCOORD0;
    float3 tangent    : TANGENT;
};

// arguments from the vertex shader to the fragment shader
struct v2f_multi {
    float4 position        : POSITION;
    float2 texCoord        : TEXCOORD0;
    float3 eyeDirection    : TEXCOORD1;
    float3 lightDirection0    : TEXCOORD2;
    float3 lightDirection1    : TEXCOORD3;
    float2 lightAttenuation : TEXCOORD4;
    float4 color            : COLOR0;
    float  fog              : TEXCOORD5;
};

// arguments from the vertex shader to the fragment shader
struct v2f_vl {
    float4 position         : POSITION;
    float2 texCoord         : TEXCOORD0;
    float4 vertexColor      : COLOR0;
    float4 specularColor    : COLOR1;
    float fog               : TEXCOORD1;
};

// Convert a float3 that has been encoded as a color into a vector
float3 expand(float3 v) { return (v - 0.5) * 2; }
float3 compress(float3 v) { return (v * 0.5) + 0.5; }

// This maps the light and eye directions into tangent space
// Tangents are passed in with the tangent semantic
// This also handles the light setup, including attenuation
// for up to two lights, and linear fog.
v2f_multi EmissiveBuildingVP11(a2v IN,
             out float oFog : FOG,
             uniform float4 FogSettings,
             uniform float4x4 WorldViewProj,
             uniform float4 LightPosition[2],
             uniform float4 LightAttenuation[2],
             uniform float4 EyePosition)
{
    v2f_multi OUT;
    
    float3 bitangent = cross(IN.tangent, IN.normal);
    // compute the 3x3 tranform from object space to tangent space
    float3x3 rotation = float3x3(IN.tangent, bitangent, IN.normal);

    // params for light direction and attenuation
    float3 lightDirection[2];
    float2 lightAttenuation;

    // get the light and eye direction in object space (not normalized)
    for (int lightIndex = 0; lightIndex < 2; ++lightIndex) {
        // get the light direction in object space (not normalized)
        float4 lightPosition = LightPosition[lightIndex];
        lightDirection[lightIndex] = lightPosition.xyz - (IN.position * lightPosition.w).xyz;
        // set up attenuation params
        float lightDistance = length(lightDirection[lightIndex]);
        float lightDistanceSquared = lightDistance * lightDistance;
        lightAttenuation[lightIndex] = (lightDistance > LightAttenuation[lightIndex].x) ?
            0 : (1 / (LightAttenuation[lightIndex].y + LightAttenuation[lightIndex].z * lightDistance + LightAttenuation[lightIndex].w * lightDistanceSquared));
        // get the light direction in tangent space
        lightDirection[lightIndex] = mul(rotation, lightDirection[lightIndex]);
    }

    // the light direction for passing to fragment shader
    OUT.lightDirection0 = lightDirection[0];
    OUT.lightDirection1 = lightDirection[1];

    // the light attenuation for passing to fragment shader
    OUT.lightAttenuation.x = saturate(lightAttenuation[0]);
    OUT.lightAttenuation.y = saturate(lightAttenuation[1]);

    // get the eye direction in object space (not normalized)
    float3 eyeDirection = EyePosition.xyz - (IN.position * EyePosition.w).xyz;
    // get the eye direction in tangent space
    OUT.eyeDirection = mul(rotation, eyeDirection);

    OUT.position = mul(WorldViewProj, IN.position);
    OUT.texCoord = IN.texCoord;

    // compute linear fog
    float eyeDistance = length(eyeDirection);
    OUT.fog = clamp((eyeDistance - FogSettings[0]) / (FogSettings[1] - FogSettings[0]), 0.0, 1.0) * FogSettings[2];
    oFog = 1.0;
    
    OUT.color = IN.color;
    return OUT;
}

// This maps the light and eye directions into tangent space
// Tangents are passed in with the tangent semantic
// This also handles the light setup, including attenuation
// for up to two lights, and linear fog.
v2f_multi EmissiveBuildingVP11_nocolor(a2v_nocolor IN,
             out float oFog : FOG,
             uniform float4 FogSettings,
             uniform float4x4 WorldViewProj,
             uniform float4 LightPosition[2],
             uniform float4 LightAttenuation[2],
             uniform float4 EyePosition)
{
    v2f_multi OUT;
    
    float3 bitangent = cross(IN.tangent, IN.normal);
    // compute the 3x3 tranform from object space to tangent space
    float3x3 rotation = float3x3(IN.tangent, bitangent, IN.normal);

    // params for light direction and attenuation
    float3 lightDirection[2];
    float2 lightAttenuation;

    // get the light and eye direction in object space (not normalized)
    for (int lightIndex = 0; lightIndex < 2; ++lightIndex) {
        // get the light direction in object space (not normalized)
        float4 lightPosition = LightPosition[lightIndex];
        lightDirection[lightIndex] = lightPosition.xyz - (IN.position * lightPosition.w).xyz;
        // set up attenuation params
        float lightDistance = length(lightDirection[lightIndex]);
        float lightDistanceSquared = lightDistance * lightDistance;
        lightAttenuation[lightIndex] = (lightDistance > LightAttenuation[lightIndex].x) ?
            0 : (1 / (LightAttenuation[lightIndex].y + LightAttenuation[lightIndex].z * lightDistance + LightAttenuation[lightIndex].w * lightDistanceSquared));
        // get the light direction in tangent space
        lightDirection[lightIndex] = mul(rotation, lightDirection[lightIndex]);
    }

    // the light direction for passing to fragment shader
    OUT.lightDirection0 = lightDirection[0];
    OUT.lightDirection1 = lightDirection[1];

    // the light attenuation for passing to fragment shader
    OUT.lightAttenuation.x = saturate(lightAttenuation[0]);
    OUT.lightAttenuation.y = saturate(lightAttenuation[1]);

    // get the eye direction in object space (not normalized)
    float3 eyeDirection = EyePosition.xyz - (IN.position * EyePosition.w).xyz;
    // get the eye direction in tangent space
    OUT.eyeDirection = mul(rotation, eyeDirection);

    OUT.position = mul(WorldViewProj, IN.position);
    OUT.texCoord = IN.texCoord;

    // compute linear fog
    float eyeDistance = length(eyeDirection);
    OUT.fog = clamp((eyeDistance - FogSettings[0]) / (FogSettings[1] - FogSettings[0]), 0.0, 1.0) * FogSettings[2];
    oFog = 1.0;

    OUT.color = float4(0, 0, 0, 1);
    return OUT;
}

void EmissiveBuildingFP20(v2f_multi IN,
          out float4 oColor : COLOR,
          uniform float4 LMa, // ambient light
          uniform float4 LMd[2], // diffuse light
          uniform float4 LMs[2], // specular light
          uniform float shininess,
          uniform float4 emissiveMult,
          uniform float4 colorMult,
          uniform float diffuseMult,
          uniform float4 fogColor,
          uniform sampler2D NormalMap,
          uniform sampler2D SpecularMap,
          uniform sampler2D DiffuseMap,
          uniform sampler2D EmissiveMap)
{
    // fetch and expand normal
    float3 normal = normalize(expand(tex2D(NormalMap, IN.texCoord).rgb));
    // fetch specular (specular map) data
    float4 specularTex = tex2D(SpecularMap, IN.texCoord);
    float3 normEyeDir = normalize(IN.eyeDirection);

    float3 normLightDir;
    float3 normHalfAngle;
    
    // Set up the lights in the easier format
    float3 lightDirection[2];
    lightDirection[0] = IN.lightDirection0;
    lightDirection[1] = IN.lightDirection1;

    float attenuation[2];
    attenuation[0] = saturate(IN.lightAttenuation.x);
    attenuation[1] = saturate(IN.lightAttenuation.y);

    float4 emissiveTex = tex2D(EmissiveMap, IN.texCoord);
    float4 diffuseTex = tex2D(DiffuseMap, IN.texCoord); // rgba
    float4 vertexColor = IN.color * colorMult;
    float4 emissive = emissiveTex * emissiveMult;
    float4 color = (vertexColor + emissive + LMa) * diffuseTex;
    for (int lightIndex = 0; lightIndex < 2; ++lightIndex) {
        float3 normLightDir  = normalize(lightDirection[lightIndex]);
        float3 normHalfAngle = normalize(normLightDir + normEyeDir);
        float diffuse = saturate(dot(normal, normLightDir)) * diffuseMult;
        float specular = dot(normal, normLightDir) > 0 ?
           saturate(dot(normal, normHalfAngle)) : 0;
        float specular_pow = pow(specular, shininess);
        color = color + attenuation[lightIndex] * (LMd[lightIndex] * diffuse * diffuseTex +
                               LMs[lightIndex] * specularTex * specular_pow);
    }

    color.a = diffuseTex.a;
    color = saturate(color);
   
    float fog = IN.fog * ( any(emissiveTex.rgb > 0.2) ? 0 : 1 );
    
    oColor = lerp(color, fogColor, fog);
}

// Vertex program for simple lighting
v2f_vl
EmissiveBuildingVP11_VertexLighting
(
    out float oFog : FOG,
    a2v IN,

	// the full World/View/Proj combined matrix
	uniform float4x4	WorldViewProj,
	
	// Fog settings
	//	fogSettings[0] - fog near distance
	//	fogSettings[1] - fog far distance
	//	fogSettings[2] - fog scale
	uniform float4		FogSettings,

    uniform float4		LightPosition[2],
    uniform float4		LightAttenuation[2],
	
	// Diffuse color of the light
	uniform float4		LightSpecular[2],

    uniform float4      EyePosition,
	
	uniform float       shininess
)
{
	v2f_vl OUT;

    // Calculate the output position and texture coordinates
	OUT.position  = mul(WorldViewProj,IN.position);
	OUT.texCoord = IN.texCoord;
    
    float3 lightDirection[2];
    float lightAttenuation[2];

    // transform eye position to world space
    float3 eyeDirection = normalize(EyePosition.xyz - IN.position.xyz);
    
    float4 specularColor[2];
    
	// get the light and eye direction in world space (not normalized)
    for (int lightIndex = 0; lightIndex < 2; ++lightIndex) {

        // Account for whether the light is a point source.
        lightDirection[lightIndex] = LightPosition[lightIndex].xyz - (IN.position * LightPosition[lightIndex].w).xyz;
        // set up attenuation params
        float lightDistance = length(lightDirection[lightIndex]);
        float lightDistanceSquared = lightDistance * lightDistance;

        //lightDistance = 1;
        //LightAttenuation[1].x = 0;

        lightAttenuation[lightIndex] = (lightDistance >
                                        LightAttenuation[lightIndex].x) ?
            0 : (1 / (LightAttenuation[lightIndex].y +
                      LightAttenuation[lightIndex].z * lightDistance +
                      LightAttenuation[lightIndex].w * lightDistanceSquared));
                      
        float3 normLightDir  = normalize(lightDirection[lightIndex]);
        float3 normHalfAngle = normalize(normLightDir + eyeDirection);
        float specular = dot(IN.normal, normLightDir) > 0 ? saturate(dot(IN.normal, normHalfAngle)) : 0;
        float specular_pow = pow(specular, shininess);
        specularColor[lightIndex] = lightAttenuation[lightIndex] * LightSpecular[lightIndex] * specular_pow;
    }
 
    OUT.vertexColor = IN.color;
    OUT.specularColor = specularColor[0] + specularColor[1];

	// compute fog
	OUT.fog = clamp(( OUT.position.z - FogSettings[0] ) / (FogSettings[1] - FogSettings[0]),0.0,1.0) * FogSettings[2];

    oFog = 1.0;
    return OUT;
}

// Vertex program for simple lighting
v2f_vl
EmissiveBuildingVP11_VertexLighting_NoColor
(
    a2v_nocolor IN,
    
    out float oFog : FOG,

	// the full World/View/Proj combined matrix
	uniform float4x4	WorldViewProj,
	
	// Just the world matrix.  Used to find the world coordinates of the vertices for generating
	// some texture coordinates
	uniform float4x4	WorldMat,
	
	// Fog settings
	//	fogSettings[0] - fog near distance
	//	fogSettings[1] - fog far distance
	//	fogSettings[2] - fog scale
	uniform float4		FogSettings,

    uniform float4		LightPosition[2],
    uniform float4		LightAttenuation[2],
	
	// Diffuse color of the light
	uniform float4		LightSpecular[2],

    uniform float4      EyePosition,
	
	uniform float       shininess
)
{
	v2f_vl OUT;

    // Calculate the output position and texture coordinates
	OUT.position  = mul(WorldViewProj,IN.position);
	OUT.texCoord = IN.texCoord;
    
    float3 lightDirection[2];
    float lightAttenuation[2];

      
    // transform position to world space
    float4 position = mul(WorldMat, IN.position);
    float3 normal = mul(((float3x3)WorldMat), IN.normal);
    
    // transform eye position to world space
    float4 eyePosition = mul(WorldMat, EyePosition);
    float3 eyeDirection = normalize(eyePosition.xyz - position.xyz);
    
    float4 specularColor[2];
    
	// get the light and eye direction in world space (not normalized)
    for (int lightIndex = 0; lightIndex < 2; ++lightIndex) {
        float4 lightPosition = mul(WorldMat, LightPosition[lightIndex]);

        // Account for whether the light is a point source.
        lightDirection[lightIndex] = lightPosition.xyz - (position * lightPosition.w).xyz;
        // set up attenuation params
        float lightDistance = length(lightDirection[lightIndex]);
        float lightDistanceSquared = lightDistance * lightDistance;

        //lightDistance = 1;
        //LightAttenuation[1].x = 0;

        lightAttenuation[lightIndex] = (lightDistance >
                                        LightAttenuation[lightIndex].x) ?
            0 : (1 / (LightAttenuation[lightIndex].y +
                      LightAttenuation[lightIndex].z * lightDistance +
                      LightAttenuation[lightIndex].w * lightDistanceSquared));
                      
        float3 normLightDir  = normalize(lightDirection[lightIndex]);
        float3 normHalfAngle = normalize(normLightDir + eyeDirection);
        float specular = dot(normal, normLightDir) > 0 ? saturate(dot(normal, normHalfAngle)) : 0;
        float specular_pow = pow(specular, shininess);
        specularColor[lightIndex] = lightAttenuation[lightIndex] * LightSpecular[lightIndex] * specular_pow;
    }
 
    OUT.vertexColor = float4(0, 0, 0, 1);
    
    OUT.specularColor = specularColor[0] + specularColor[1];

	// compute fog
	OUT.fog = clamp(( OUT.position.z - FogSettings[0] ) / (FogSettings[1] - FogSettings[0]),0.0,1.0) * FogSettings[2];
    oFog = 1.0;
    
    return OUT;
}

void EmissiveBuildingFP20_VertexLighting(v2f_vl IN,
          out float4 oColor : COLOR,
          uniform float4 emissiveMult,
          uniform float4 colorMult,
          uniform float4 specularMult,
          uniform float4 LMa, // ambient light
          uniform float4 fogColor,
          uniform sampler2D SpecularMap,
          uniform sampler2D DiffuseMap,
          uniform sampler2D EmissiveMap)
{
    // fetch specular (specular map) data
    float4 specularTex = tex2D(SpecularMap, IN.texCoord);
    float4 emissiveTex = tex2D(EmissiveMap, IN.texCoord);
    float4 diffuseTex = tex2D(DiffuseMap, IN.texCoord); // rgba
    
    float4 vertexColor = IN.vertexColor * colorMult;
    float4 emissive = emissiveTex * emissiveMult;
    float4 color = (vertexColor + emissive + LMa) * diffuseTex;
    
    color = color + IN.specularColor * specularMult * specularTex;

    color.a = diffuseTex.a;
    color = saturate(color);
    
    float fog = IN.fog * ( any(emissiveTex.rgb > 0.2) ? 0 : 1 );
    
    oColor = lerp(color, fogColor, fog);
}

void EmissiveBuildingFP20_VertexLightingAlpha(v2f_vl IN,
          out float4 oColor : COLOR,
          uniform float4 emissiveMult,
          uniform float4 colorMult,
          uniform float4 specularMult,
          uniform float4 LMa, // ambient light
          uniform float4 fogColor,
          uniform sampler2D SpecularMap,
          uniform sampler2D DiffuseMap,
          uniform sampler2D EmissiveMap)
{
    // fetch specular (specular map) data
    float4 specularTex = tex2D(SpecularMap, IN.texCoord);
    float4 emissiveTex = tex2D(EmissiveMap, IN.texCoord);
    float4 diffuseTex = tex2D(DiffuseMap, IN.texCoord); // rgba
    
    float4 vertexColor = IN.vertexColor * colorMult;
    float4 emissive = emissiveTex * emissiveMult;
    float4 color = (vertexColor + emissive + LMa) * diffuseTex;
    
    color = color + IN.specularColor * specularMult * specularTex;

    color.a = IN.vertexColor.a;
    color = saturate(color);
    
    float fog = IN.fog * ( any(emissiveTex.rgb > 0.2) ? 0 : 1 );
    
    oColor = lerp(color, fogColor, fog);
}

# import clr
# clr.AddReference("System")
# clr.AddReference("Multiverse.Network")

from System.Math import PI
from System.Collections.Generic import *
from Axiom.Core import ColorEx
from Axiom.MathLib import *
from Multiverse.Network import *
from Multiverse.Base import Client
from Multiverse.MathLib import MathUtil
import ClientAPI
import SAPlayer
import SAUtil

def InitStandaloneWorld():
    #ClientAPI.World.IsWorldLocal = True
    # First, the login response
    loginResponse = AuthorizedLoginResponseMessage()
    loginResponse.Oid = 1
    loginResponse.Success = True
    loginResponse.Message = "standalone"
    loginResponse.Version = "standalone"
    MessageDispatcher.Instance.QueueMessage(loginResponse)
    
    # Next, set up the world
    InitializeWorld()

    # Now, set up the player model
    InitializePlayer()

    # Tell the client we're initialized
    SendLoadingStateMessage()

def InitializeWorld():
    
    #terrainInitString = "<Terrain><algorithm>HybridMultifractalWithSeedMap</algorithm><xOffset>-0.4</xOffset><yOffset>-0.3</yOffset><zOffset>0</zOffset><h>0.25</h><lacunarity>2</lacunarity><octaves>8</octaves><metersPerPerlinUnit>800</metersPerPerlinUnit><heightScale>300</heightScale><heightOffset>-0.15</heightOffset><fractalOffset>0.1</fractalOffset><heightFloor>0</heightFloor><seedMapOriginX>-3200</seedMapOriginX><seedMapOriginY>0</seedMapOriginY><seedMapOriginZ>-5120</seedMapOriginZ><seedMapMetersPerSample>128</seedMapMetersPerSample><outsideSeedMapHeight>0</outsideSeedMapHeight><seedMap width=\"50\" height=\"80\" mapFormat=\"digitStringseedMap></Terrain>"
    
    # Initialization messages
    terrainConfigMessage = TerrainConfigMessage()
    terrainString = SAUtil.GetTerrainString()
    terrainConfigMessage.ConfigString = terrainString
    MessageDispatcher.Instance.QueueMessage(terrainConfigMessage)

    newObjMessage = NewObjectMessage()
    newObjMessage.Oid = 1
    newObjMessage.ObjectId = 1
    newObjMessage.Name = SAPlayer.Name
    spawnLoc = SAUtil.GetWorldMarker(SAPlayer.SpawnMarkerName)
    # by the beach
    newObjMessage.Location = spawnLoc[0]
    newObjMessage.Orientation = spawnLoc[1]
    newObjMessage.ScaleFactor = Vector3.UnitScale
    newObjMessage.ObjectType = ObjectNodeType.User
    newObjMessage.FollowTerrain = False
    MessageDispatcher.Instance.QueueMessage(newObjMessage)

    uiThemeMessage = UiThemeMessage()
    uiThemeMessage.UiModules = List[str]()
    uiThemeMessage.UiModules.Add("basic.toc")
    # uiThemeMessage.UiModules.Add("mars.toc")
    MessageDispatcher.Instance.QueueMessage(uiThemeMessage)

    # End of initialization messages


def InitializePlayer():
    modelInfoMessage = OldModelInfoMessage()
    modelInfoMessage.Oid = 1
    meshInfo = MeshInfo()

    meshInfo.MeshFile = SAPlayer.Mesh

    modelInfoMessage.ModelInfo.Add(meshInfo)
    MessageDispatcher.Instance.QueueMessage(modelInfoMessage)

def SendLoadingStateMessage():
    loadingStateMessage = LoadingStateMessage()
    loadingStateMessage.LoadingState = False
    MessageDispatcher.Instance.QueueMessage(loadingStateMessage)
    
def PlayerInitHandler(sender, args):
    SAUtil.SetupPlayer()
    
ClientAPI.Log("running Standalone.py")    
ClientAPI.RegisterEventHandler('PlayerInitialized', PlayerInitHandler)
InitStandaloneWorld()
ClientAPI.Log("done running Standalone.py")

// arguments from the vertex shader to the fragment shader
struct v2f_basic_multi {
	float4 position		: POSITION;
    float2 texCoord		: TEXCOORD0;
	float3 eyeDirection	: TEXCOORD1;
	float3 lightDirection0	: TEXCOORD2;
	float3 lightDirection1	: TEXCOORD3;
	float2 lightAttenuation : TEXCOORD4;
	float3 normal       : TEXCOORD5;
};

struct ShadowCasterVSOutput
{
	float4	position		: POSITION;
	float4	color			: COLOR0;
	float	fog				: FOG;
	float	depth			: TEXCOORD0;
};

struct ShadowReceiverVSOutput
{
  float4 position		: POSITION;     // Vertex position in screen-space
  float4 lightPosition	: TEXCOORD0;    // Fragment's position in light space
  float4 fade			: TEXCOORD1;
  float fog				: FOG;
};

float3 expand(float3 v) { return (v - 0.5) * 2; }
float3 compress(float3 v) { return (v * 0.5) + 0.5; }

//  Basic vertex program with hardware skinning for animations with 
//  blend weight per vertex
v2f_basic_multi CompoundVS1_Basic_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          out float oFog      : FOG,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[64],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 LightPosition[2],
                                          uniform float4 LightAttenuation[2],
                                          uniform float4 EyePosition)
{
    v2f_basic_multi OUT;

    float4 position = float4(0, 0, 0, 0);
    float3 normal = float3(0, 0, 0);

    for (int i = 0; i < 1; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
		normal += mul(((float3x3)WorldMatrix3x4Array[iBlendIdx[i]]), iNormal) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
	OUT.normal = compress(normalize(normal));
	
    float3 lightDirection[2];
    float lightAttenuation[2];
    
    // get the light and eye direction in world space (not normalized)
    for (int lightIndex = 0; lightIndex < 2; ++lightIndex) {
        // get the light direction in object space (not normalized)
        float4 lightPosition = mul(WorldMatrix, LightPosition[lightIndex]);

        // Account for whether the light is a point source.
        lightDirection[lightIndex] = lightPosition.xyz - (position * lightPosition.w).xyz;
        // set up attenuation params
        float lightDistance = length(lightDirection[lightIndex]);
        float lightDistanceSquared = lightDistance * lightDistance;
        lightAttenuation[lightIndex] = (lightDistance >
                                        LightAttenuation[lightIndex].x) ?
            0 : (1 / (LightAttenuation[lightIndex].y +
                      LightAttenuation[lightIndex].z * lightDistance +
                      LightAttenuation[lightIndex].w * lightDistanceSquared));
    }

    // the light direction for passing to fragment shader
    OUT.lightDirection0 = compress(normalize(lightDirection[0]));
    OUT.lightDirection1 = compress(normalize(lightDirection[1]));

    // the light attenuation for passing to fragment shader
    OUT.lightAttenuation.x = saturate(lightAttenuation[0]);
    OUT.lightAttenuation.y = saturate(lightAttenuation[1]);

    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;
    // get the eye direction in world space
    OUT.eyeDirection = compress(normalize(eyeDirection));

    OUT.texCoord = texCoord;

    // compute linear fog
    float eyeDistance = length(eyeDirection);
    float fog = clamp((eyeDistance - FogSettings[0]) / (FogSettings[1] - FogSettings[0]),
                      0.0, 1.0) * FogSettings[2];
    oFog = 1.0 - fog;

    return OUT;
}

//  Basic vertex program with hardware skinning for animations with 2
//  blend weights per vertex
v2f_basic_multi CompoundVS2_Basic_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          out float oFog      : FOG,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[64],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 LightPosition[2],
                                          uniform float4 LightAttenuation[2],
                                          uniform float4 EyePosition)
{
    v2f_basic_multi OUT;

    float4 position = float4(0, 0, 0, 0);
    float3 normal = float3(0, 0, 0);

    for (int i = 0; i < 2; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
		normal += mul(((float3x3)WorldMatrix3x4Array[iBlendIdx[i]]), iNormal) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
	OUT.normal = compress(normalize(normal));
	
    float3 lightDirection[2];
    float lightAttenuation[2];
    
    // get the light and eye direction in world space (not normalized)
    for (int lightIndex = 0; lightIndex < 2; ++lightIndex) {
        // get the light direction in object space (not normalized)
        float4 lightPosition = mul(WorldMatrix, LightPosition[lightIndex]);

        // Account for whether the light is a point source.
        lightDirection[lightIndex] = lightPosition.xyz - (position * lightPosition.w).xyz;
        // set up attenuation params
        float lightDistance = length(lightDirection[lightIndex]);
        float lightDistanceSquared = lightDistance * lightDistance;
        lightAttenuation[lightIndex] = (lightDistance >
                                        LightAttenuation[lightIndex].x) ?
            0 : (1 / (LightAttenuation[lightIndex].y +
                      LightAttenuation[lightIndex].z * lightDistance +
                      LightAttenuation[lightIndex].w * lightDistanceSquared));
    }

    // the light direction for passing to fragment shader
    OUT.lightDirection0 = compress(normalize(lightDirection[0]));
    OUT.lightDirection1 = compress(normalize(lightDirection[1]));

    // the light attenuation for passing to fragment shader
    OUT.lightAttenuation.x = saturate(lightAttenuation[0]);
    OUT.lightAttenuation.y = saturate(lightAttenuation[1]);

    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;
    // get the eye direction in world space
    OUT.eyeDirection = compress(normalize(eyeDirection));

    OUT.texCoord = texCoord;

    // compute linear fog
    float eyeDistance = length(eyeDirection);
    float fog = clamp((eyeDistance - FogSettings[0]) / (FogSettings[1] - FogSettings[0]),
                      0.0, 1.0) * FogSettings[2];
    oFog = 1.0 - fog;

    return OUT;
}

//  Basic vertex program with hardware skinning for animations with 3
//  blend weights per vertex
v2f_basic_multi CompoundVS3_Basic_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          out float oFog      : FOG,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[64],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 LightPosition[2],
                                          uniform float4 LightAttenuation[2],
                                          uniform float4 EyePosition)
{
    v2f_basic_multi OUT;

    float4 position = float4(0, 0, 0, 0);
    float3 normal = float3(0, 0, 0);

    for (int i = 0; i < 3; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
		normal += mul(((float3x3)WorldMatrix3x4Array[iBlendIdx[i]]), iNormal) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
	OUT.normal = compress(normalize(normal));
	
    float3 lightDirection[2];
    float lightAttenuation[2];
    
    // get the light and eye direction in world space (not normalized)
    for (int lightIndex = 0; lightIndex < 2; ++lightIndex) {
        // get the light direction in object space (not normalized)
        float4 lightPosition = mul(WorldMatrix, LightPosition[lightIndex]);

        // Account for whether the light is a point source.
        lightDirection[lightIndex] = lightPosition.xyz - (position * lightPosition.w).xyz;
        // set up attenuation params
        float lightDistance = length(lightDirection[lightIndex]);
        float lightDistanceSquared = lightDistance * lightDistance;
        lightAttenuation[lightIndex] = (lightDistance >
                                        LightAttenuation[lightIndex].x) ?
            0 : (1 / (LightAttenuation[lightIndex].y +
                      LightAttenuation[lightIndex].z * lightDistance +
                      LightAttenuation[lightIndex].w * lightDistanceSquared));
    }

    // the light direction for passing to fragment shader
    OUT.lightDirection0 = compress(normalize(lightDirection[0]));
    OUT.lightDirection1 = compress(normalize(lightDirection[1]));

    // the light attenuation for passing to fragment shader
    OUT.lightAttenuation.x = saturate(lightAttenuation[0]);
    OUT.lightAttenuation.y = saturate(lightAttenuation[1]);

    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;
    // get the eye direction in world space
    OUT.eyeDirection = compress(normalize(eyeDirection));

    OUT.texCoord = texCoord;

    // compute linear fog
    float eyeDistance = length(eyeDirection);
    float fog = clamp((eyeDistance - FogSettings[0]) / (FogSettings[1] - FogSettings[0]),
                      0.0, 1.0) * FogSettings[2];
    oFog = 1.0 - fog;

    return OUT;
}

//  Basic vertex program with hardware skinning for animations with 4
//  blend weights per vertex
v2f_basic_multi CompoundVS4_Basic_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          out float oFog      : FOG,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[73],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 LightPosition[2],
                                          uniform float4 LightAttenuation[2],
                                          uniform float4 EyePosition)
{
    v2f_basic_multi OUT;

    float4 position = float4(0, 0, 0, 0);
    float3 normal = float3(0, 0, 0);

    for (int i = 0; i < 4; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
		normal += mul(((float3x3)WorldMatrix3x4Array[iBlendIdx[i]]), iNormal) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
	OUT.normal = compress(normalize(normal));
	
    float3 lightDirection[2];
    float lightAttenuation[2];
    
    // get the light and eye direction in world space (not normalized)
    for (int lightIndex = 0; lightIndex < 2; ++lightIndex) {
        // get the light direction in object space (not normalized)
        float4 lightPosition = mul(WorldMatrix, LightPosition[lightIndex]);

        // Account for whether the light is a point source.
        lightDirection[lightIndex] = lightPosition.xyz - (position * lightPosition.w).xyz;
        // set up attenuation params
        float lightDistance = length(lightDirection[lightIndex]);
        float lightDistanceSquared = lightDistance * lightDistance;
        lightAttenuation[lightIndex] = (lightDistance >
                                        LightAttenuation[lightIndex].x) ?
            0 : (1 / (LightAttenuation[lightIndex].y +
                      LightAttenuation[lightIndex].z * lightDistance +
                      LightAttenuation[lightIndex].w * lightDistanceSquared));
    }

    // the light direction for passing to fragment shader
    OUT.lightDirection0 = compress(normalize(lightDirection[0]));
    OUT.lightDirection1 = compress(normalize(lightDirection[1]));

    // the light attenuation for passing to fragment shader
    OUT.lightAttenuation.x = saturate(lightAttenuation[0]);
    OUT.lightAttenuation.y = saturate(lightAttenuation[1]);

    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;
    // get the eye direction in world space
    OUT.eyeDirection = compress(normalize(eyeDirection));

    OUT.texCoord = texCoord;

    // compute linear fog
    float eyeDistance = length(eyeDirection);
    float fog = clamp((eyeDistance - FogSettings[0]) / (FogSettings[1] - FogSettings[0]),
                      0.0, 1.0) * FogSettings[2];
    oFog = 1.0 - fog;

    return OUT;
}

//  Basic vertex program with hardware skinning for animations with 
//  blend weight per vertex.  For Shadow Caster.
ShadowCasterVSOutput CompoundVS1_Shadow_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[64],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 EyePosition,
                                          uniform float4 AmbientLightColor)
{
    ShadowCasterVSOutput OUT;

    float4 position = float4(0, 0, 0, 0);

    for (int i = 0; i < 1; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
    OUT.depth = OUT.position.z;
	
    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;

    // compute linear fog
    float eyeDistance = length(eyeDirection);
    float fog = clamp((eyeDistance - FogSettings[0]) / (FogSettings[1] - FogSettings[0]),
                      0.0, 1.0) * FogSettings[2];
    OUT.fog = 1.0 - fog;
    
    OUT.color = AmbientLightColor;

    return OUT;
}

//  Basic vertex program with hardware skinning for animations with
//  2 blend weights per vertex.  For Shadow Caster.
ShadowCasterVSOutput CompoundVS2_Shadow_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[64],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 EyePosition,
                                          uniform float4 AmbientLightColor)
{
    ShadowCasterVSOutput OUT;

    float4 position = float4(0, 0, 0, 0);

    for (int i = 0; i < 2; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
    OUT.depth = OUT.position.z;
	
    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;

    // compute linear fog
    float eyeDistance = length(eyeDirection);
    float fog = clamp((eyeDistance - FogSettings[0]) / (FogSettings[1] - FogSettings[0]),
                      0.0, 1.0) * FogSettings[2];
    OUT.fog = 1.0 - fog;
    
    OUT.color = AmbientLightColor;

    return OUT;
}

//  Basic vertex program with hardware skinning for animations with
//  2 blend weights per vertex.  For Shadow Caster.
ShadowCasterVSOutput CompoundVS3_Shadow_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[64],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 EyePosition,
                                          uniform float4 AmbientLightColor)
{
    ShadowCasterVSOutput OUT;

    float4 position = float4(0, 0, 0, 0);

    for (int i = 0; i < 3; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
    OUT.depth = OUT.position.z;
	
    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;

    // compute linear fog
    float eyeDistance = length(eyeDirection);
    float fog = clamp((eyeDistance - FogSettings[0]) / (FogSettings[1] - FogSettings[0]),
                      0.0, 1.0) * FogSettings[2];
    OUT.fog = 1.0 - fog;
    
    OUT.color = AmbientLightColor;

    return OUT;
}

//  Basic vertex program with hardware skinning for animations with
//  4 blend weights per vertex.  For Shadow Caster.
ShadowCasterVSOutput CompoundVS4_Shadow_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[73],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 EyePosition,
                                          uniform float4 AmbientLightColor)
{
    ShadowCasterVSOutput OUT;

    float4 position = float4(0, 0, 0, 0);

    for (int i = 0; i < 4; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
    OUT.depth = OUT.position.z;
	
    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;

    // compute linear fog
    float eyeDistance = length(eyeDirection);
    float fog = clamp((eyeDistance - FogSettings[0]) / (FogSettings[1] - FogSettings[0]),
                      0.0, 1.0) * FogSettings[2];
    OUT.fog = 1.0 - fog;
    
    OUT.color = AmbientLightColor;

    return OUT;
}

//  Basic vertex program with hardware skinning for animations with
//  1 blend weights per vertex.  For Shadow Caster.
ShadowReceiverVSOutput CompoundVS1_ShadowReceiver_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[64],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 EyePosition,
                                          uniform float4x4 TextureViewProjection)
{
    ShadowReceiverVSOutput OUT;

    float4 position = float4(0, 0, 0, 0);

    for (int i = 0; i < 1; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
    
    
    // Compute vertex position in light space
    // First object to world space
    OUT.lightPosition = mul(WorldMatrix, iPosition);
    // Then world to light space
    OUT.lightPosition = mul(TextureViewProjection, OUT.lightPosition);
   
    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;
    float eyeDistance = length(eyeDirection); 
    
    // compute fog
	float fade = clamp(( eyeDistance - FogSettings[0] ) / (FogSettings[1] - FogSettings[0]),0.0,1.0) * FogSettings[2];
    OUT.fade = fade;
    //Out.fade = 0;
    OUT.fog = 1;
    
    return OUT;
}

//  Basic vertex program with hardware skinning for animations with
//  2 blend weights per vertex.  For Shadow Caster.
ShadowReceiverVSOutput CompoundVS2_ShadowReceiver_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[64],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 EyePosition,
                                          uniform float4x4 TextureViewProjection)
{
    ShadowReceiverVSOutput OUT;

    float4 position = float4(0, 0, 0, 0);

    for (int i = 0; i < 2; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
    
    
    // Compute vertex position in light space
    // First object to world space
    OUT.lightPosition = mul(WorldMatrix, iPosition);
    // Then world to light space
    OUT.lightPosition = mul(TextureViewProjection, OUT.lightPosition);
   
    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;
    float eyeDistance = length(eyeDirection); 
    
    // compute fog
	float fade = clamp(( eyeDistance - FogSettings[0] ) / (FogSettings[1] - FogSettings[0]),0.0,1.0) * FogSettings[2];
    OUT.fade = fade;
    //Out.fade = 0;
    OUT.fog = 1;
    
    return OUT;
}

//  Basic vertex program with hardware skinning for animations with
//  3 blend weights per vertex.  For Shadow Caster.
ShadowReceiverVSOutput CompoundVS3_ShadowReceiver_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[64],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 EyePosition,
                                          uniform float4x4 TextureViewProjection)
{
    ShadowReceiverVSOutput OUT;

    float4 position = float4(0, 0, 0, 0);

    for (int i = 0; i < 3; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
    
    
    // Compute vertex position in light space
    // First object to world space
    OUT.lightPosition = mul(WorldMatrix, iPosition);
    // Then world to light space
    OUT.lightPosition = mul(TextureViewProjection, OUT.lightPosition);
   
    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;
    float eyeDistance = length(eyeDirection); 
    
    // compute fog
	float fade = clamp(( eyeDistance - FogSettings[0] ) / (FogSettings[1] - FogSettings[0]),0.0,1.0) * FogSettings[2];
    OUT.fade = fade;
    //Out.fade = 0;
    OUT.fog = 1;
    
    return OUT;
}

//  Basic vertex program with hardware skinning for animations with
//  4 blend weights per vertex.  For Shadow Caster.
ShadowReceiverVSOutput CompoundVS4_ShadowReceiver_Skinned(float4 iPosition    : POSITION,
                                          float2 texCoord     : TEXCOORD0,
                                          float3 iNormal      : NORMAL,
                                          float4 iBlendIdx	 : BLENDINDICES,
                                          float4 iBlendWgt	 : BLENDWEIGHT,
                                          uniform float4 FogSettings,
                                          uniform float3x4 WorldMatrix3x4Array[73],
                                          uniform float4x4 ViewProj,
                                          uniform float4x4 WorldMatrix,
                                          uniform float4 EyePosition,
                                          uniform float4x4 TextureViewProjection)
{
    ShadowReceiverVSOutput OUT;

    float4 position = float4(0, 0, 0, 0);

    for (int i = 0; i < 4; i++) {
		position += float4(mul(WorldMatrix3x4Array[iBlendIdx[i]], iPosition).xyz, 1.0) * iBlendWgt[i];
	}

    OUT.position = mul(ViewProj, position);
    
    
    // Compute vertex position in light space
    // First object to world space
    OUT.lightPosition = mul(WorldMatrix, iPosition);
    // Then world to light space
    OUT.lightPosition = mul(TextureViewProjection, OUT.lightPosition);
   
    // get the eye direction in world space (not normalized)
    float4 eyePosition = mul(WorldMatrix, EyePosition);
    float3 eyeDirection = eyePosition.xyz - (position * eyePosition.w).xyz;
    float eyeDistance = length(eyeDirection); 
    
    // compute fog
	float fade = clamp(( eyeDistance - FogSettings[0] ) / (FogSettings[1] - FogSettings[0]),0.0,1.0) * FogSettings[2];
    OUT.fade = fade;
    //Out.fade = 0;
    OUT.fog = 1;
    
    return OUT;
}

void CompoundPS_20_Basic(v2f_basic_multi IN,
                         out float4 oColor    : COLOR,
                         uniform float4 LMe, // emissive light
                         uniform float4 LMa, // ambient light
                         uniform float4 LMd[2], // diffuse light
                         uniform float4 LMs[2], // specular light
                         uniform float spec_level,
                         uniform float shininess,
                         uniform sampler2D DiffuseMap)
{
    // Set up the lights in the easier format
    float3 lightDirection[2];
    lightDirection[0] = expand(IN.lightDirection0);
    lightDirection[1] = expand(IN.lightDirection1);

    float attenuation[2];
    attenuation[0] = saturate(IN.lightAttenuation.x);
    attenuation[1] = saturate(IN.lightAttenuation.y);

    float3 normEyeDir = normalize(expand(IN.eyeDirection));
    float3 normal = normalize(expand(IN.normal));

    float4 diffuseTex = tex2D(DiffuseMap, IN.texCoord); // rgba
    float4 color = (LMe + LMa) * diffuseTex;

    for (int lightIndex = 0; lightIndex < 2; ++lightIndex) {
        float3 normLightDir  = normalize(lightDirection[lightIndex]);
        float3 normHalfAngle = normalize(normLightDir + normEyeDir);
        float diffuse = saturate(dot(normal, normLightDir));
        float specular =// dot(normal, normLightDir) > 0 ?
            saturate(dot(normal, normHalfAngle));// : 0;
	float specular_pow = pow(specular, shininess) * spec_level;
        color = color + attenuation[lightIndex] * (LMd[lightIndex] * diffuse * diffuseTex 
                                                    + LMs[lightIndex] * specular_pow);
    }

    color.a = diffuseTex.a;
    oColor = saturate(color);
}
